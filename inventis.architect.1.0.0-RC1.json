{
    "manifests": {
        "inventis/architect": {
            "manifest": {
                "copy-from-recipe": {
                    "bin/": "%BIN_DIR%/"
                }
            },
            "files": {
                "bin/build": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "binDir=`dirname \"$BASH_SOURCE\"`",
                        "",
                        "if ! command -v symfony &> /dev/null",
                        "then",
                        "  echo \"[BUILD] - YOU MUST INSTALL SYMFONY CLI BEFORE PROCEEDING\"",
                        "  exit 1",
                        "fi",
                        "",
                        "symfony composer install",
                        "",
                        "if [ -f `npm whoami --registry=https://npm.inventis.be` ]; then",
                        "    echo",
                        "    echo \"[BUILD] - CREDENTIALS CAN BE FOUND IN PASSWORD VAULT\"",
                        "    echo",
                        "    npm adduser --scope=@inventis --registry=https://npm.inventis.be",
                        "fi",
                        "",
                        "echo \"[BUILD] - BUILDING WEBADMIN FRONT-END\"",
                        "echo",
                        "symfony console assets:install public --symlink --relative",
                        "${binDir}/npm install",
                        "#${binDir}/grunt build # is dont by postinstall...",
                        "symfony console cache:clear",
                        "",
                        "echo \"[BUILD] - INSTALLING FRONT-END BOILERPLATE\"",
                        "echo",
                        "cd assets/website && bin/node yarn install \\&\\& yarn run prod && cd -",
                        "",
                        "",
                        ""
                    ],
                    "executable": true
                },
                "bin/build-db": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "printf \"\\n[INSTALL] - BUILDING DATABASE... \\n\"",
                        "symfony console doctrine:schema:create",
                        "",
                        "symfony console hautelook:fixtures:load --no-interaction",
                        "symfony console inventis:media:gallery:create default default reference --activate",
                        "symfony console inventis:navigation:initialize:menu",
                        "",
                        "symfony console doctrine:migrations:sync-metadata-storage",
                        "symfony console doctrine:migrations:version --add --all --no-interaction"
                    ],
                    "executable": false
                },
                "bin/docker-run": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "POSITIONAL=()",
                        "while [[ $# -gt 0 ]]",
                        "do",
                        "key=\"$1\"",
                        "",
                        "case $key in",
                        "    -w|--workdir)",
                        "    WORKDIR=\"$2\"",
                        "    shift # past argument",
                        "    shift # past value",
                        "    ;;",
                        "    *)    # unknown option",
                        "    POSITIONAL+=(\"$1\") # save it in an array for later",
                        "    shift # past argument",
                        "    ;;",
                        "esac",
                        "done",
                        "",
                        "docker run --rm --interactive --tty --init --volume \"$PWD\":/app:cached --workdir /app/$WORKDIR ${POSITIONAL[@]}",
                        ""
                    ],
                    "executable": true
                },
                "bin/generate-ssl": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "if ! [ -x \"$(command -v brew)\" ] && ! [ -x \"$(command -v mkcert)\" ]; then",
                        "  echo 'Error: brew is not installed.' >&2",
                        "  exit 1",
                        "fi",
                        "",
                        "echo \"Type your personal TLD, followed by [ENTER]:\"",
                        "read tld",
                        "",
                        "echo",
                        "",
                        "if ! [ -x \"$(command -v mkcert)\" ]; then",
                        "    DEBUG=$(brew update)",
                        "",
                        "    if ! brew ls --versions mkcert > /dev/null; then",
                        "      DEBUG=$(brew install mkcert)",
                        "    fi",
                        "    if ! brew ls --versions nss > /dev/null; then",
                        "      DEBUG=$(brew install nss)",
                        "    fi",
                        "fi",
                        "",
                        "IS_HTTPD_RUNNING=`docker-compose top httpd`",
                        "if [ \"${IS_HTTPD_RUNNING}\" != \"\" ]; then",
                        "    docker-compose stop httpd",
                        "fi",
                        "",
                        "if [ ! -d ~/.ssl ]; then",
                        "    mkdir ~/.ssl",
                        "fi",
                        "cd ~/.ssl",
                        "rm -rf _wildcard.local.*",
                        "",
                        "echo \"Generating certificates...\"",
                        "",
                        "DEBUG=$(mkcert -install 2>&1)",
                        "DEBUG=$(mkcert \"*.local.$tld\" 2>&1)",
                        "cd - > /dev/null",
                        "",
                        "#echo DEBUG",
                        "",
                        "# Rename files for easier configuration",
                        "mv -i ~/.ssl/_wildcard.local.\"$tld\".pem ~/.ssl/_wildcard.local.pem",
                        "mv -i ~/.ssl/_wildcard.local.\"$tld\"-key.pem ~/.ssl/_wildcard.local.key.pem",
                        "",
                        "# Remove rootCA as extra security",
                        "rm -f ~/Library/Application\\ Support/mkcert/rootCA*",
                        "",
                        "echo \"Done!\"",
                        "",
                        "if [ \"${IS_HTTPD_RUNNING}\" != \"\" ]; then",
                        "    docker-compose start httpd",
                        "fi",
                        "",
                        "echo -e \"\\nYou can now use [project].local.$tld as hostname for your local projects. No extra www subdomain allowed!\"",
                        ""
                    ],
                    "executable": true
                },
                "bin/generate-version": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "#",
                        "binDir=$(dirname \"${BASH_SOURCE[0]}\")",
                        "",
                        "REVISION_FILE=\"${binDir}\"/../VERSION",
                        "",
                        "# Fetch Git tag most relevant to current HEAD - the commit hash is returned if there is none.",
                        "if git describe --tags &> /dev/null; then",
                        "    # If the current commit is the tag, return the tag itself, i.e. 1.0.0. If not, use the last tag with the commit hash",
                        "    # behind it, i.e. 1.0.0-2-gCOMMIT to indicate this is not a stable release.",
                        "    git describe --tags > \"$REVISION_FILE\"",
                        "else",
                        "    # No versions are tagged yet, use 1.0.0-alpha.COMMIT. Note that this must be a proper semantic version.",
                        "    echo -n \"1.0.0-alpha.\" > \"$REVISION_FILE\"",
                        "    git rev-parse --short HEAD >> \"$REVISION_FILE\"",
                        "fi",
                        ""
                    ],
                    "executable": true
                },
                "bin/grunt": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "binDir=`dirname \"$BASH_SOURCE\"`",
                        "",
                        "WORKDIR=.",
                        "IMAGE=inventis/node:12-alpine",
                        "",
                        "# Set INVENTIS_SSH_FILE_PATH environment variable if you want to change the default ssh key file path",
                        "[[ -z \"${INVENTIS_SSH_FILE_PATH}\" ]] && sshFilePath=~/.ssh/id_rsa || sshFilePath=\"${INVENTIS_SSH_FILE_PATH}\"",
                        "",
                        "docker pull ${IMAGE}",
                        "${binDir}/docker-run --workdir ${WORKDIR} --volume ${sshFilePath}:/root/.ssh/id_rsa:ro --volume ~/.cache/docker-npm:/root/.npm ${IMAGE} node_modules/grunt-cli/bin/grunt $@",
                        ""
                    ],
                    "executable": true
                },
                "bin/install": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "binDir=`dirname \"$BASH_SOURCE\"`",
                        "",
                        "# DOCKER SERVER",
                        "tput bold",
                        "printf \"\\n[INSTALL] - DOCKER SERVER: STARTING... \\n\"",
                        "tput sgr0",
                        "if [ ! -f \"${binDir}/../docker-compose.yml\" ]; then",
                        "    echo \"docker-compose.yml was not found. We will create one for you in the root. Please specify some details?\"",
                        "",
                        "    mysqlPort=3306",
                        "    mailhog1Port=8025",
                        "    mailhog2Port=1025",
                        "",
                        "    read -r -p \"[INSTALL] - DEFAULT PORTS? [yes]\" response",
                        "    response=${response}",
                        "    if [[ ${response} =~ ^(no|n) ]]; then",
                        "        read -p \"MYSQL port? (default $mysqlPort): \" mysqlPortInput",
                        "        read -p \"MAILHOG port? (default $mailhog1Port): \" mailhog1PortInput",
                        "        read -p \"MAILHOG port? (default $mailhog2Port): \" mailhog2PortInput",
                        "",
                        "        if [ -n \"${mysqlPortInput}\" ]; then",
                        "            mysqlPort=$mysqlPortInput",
                        "        fi",
                        "        if [ -n \"${mailhog1PortInput}\" ]; then",
                        "            mailhog1Port=$mailhog1PortInput",
                        "        fi",
                        "        if [ -n \"${mailhog2PortInput}\" ]; then",
                        "            mailhog2Port=$mailhog2PortInput",
                        "        fi",
                        "    fi",
                        "",
                        "    while [ -z ${mysqlDbName} ];",
                        "    do",
                        "        read -p \"MYSQL database name: \" mysqlDbName",
                        "    done",
                        "",
                        "    while [ -z ${mysqlDbPAssword} ];",
                        "    do",
                        "        read -p \"MYSQL database password: \" mysqlDbPAssword",
                        "    done",
                        "",
                        "    cp ${binDir}/../docker-compose.yml.dist ${binDir}/../docker-compose.yml",
                        "    cp ${binDir}/../.env.dist ${binDir}/../.env",
                        "    sed -i -- \"s/<HTTPD-PORT>/$httpdPort/g; s/<MAILHOG1-PORT>/$mailhog1Port/g; s/<MAILHOG2-PORT>/$mailhog2Port/g; s/<MYSQL-PORT>/$mysqlPort/g; s/<MYSQL-DATABASE>/$mysqlDbName/g; s/<MYSQL-PASSWORD>/$mysqlDbPAssword/g\" docker-compose.yml",
                        "    sed -i -- \"s/<MYSQL-PASSWORD>/$mysqlDbPAssword/g; s/<MYSQL-DATABASE>/$mysqlDbName/g\" .env",
                        "",
                        "    rm docker-compose.yml--",
                        "    rm .env--",
                        "fi",
                        "",
                        "docker-compose up -d --remove-orphans",
                        "",
                        "# SYMFONY SERVER",
                        "read -r -p \"[INSTALL] - ENABLE SYMFONY TLS? [yes]\" response",
                        "response=${response}",
                        "if [[ ${response} =~ ^(yes|y| ) ]] || [[ -z ${response} ]]; then",
                        "    symfony server:ca:install",
                        "fi",
                        "symfony server:start -d",
                        "",
                        "printf \"[INSTALL] - DOCKER AND SYMFONY SERVER: RUNNING! \\n\"",
                        "",
                        "",
                        "echo -e \"\\n[INSTALL] - RUNNING COMPOSER INSTALL \\n\";",
                        "symfony composer install",
                        "",
                        "# CONFIG FILES FIX",
                        "echo -e \"\\n[INSTALL] - FIXING CONFIG FILES... \\n\";",
                        "symfony php bin/installScript/localeFixer",
                        "symfony php bin/installScript/securityFixer",
                        "symfony php bin/installScript/doctrineFixer",
                        "symfony php bin/installScript/sonataFixer",
                        "",
                        "# BUILD UPLOAD DIRECTORIES",
                        "if [ ! -d \"public/media\" ]; then",
                        "    mkdir public/media",
                        "fi",
                        "if [ ! -d \"public/upload\" ]; then",
                        "    mkdir public/upload",
                        "fi",
                        "if [ ! -d \"public/upload/media\" ]; then",
                        "    mkdir public/upload/media",
                        "fi",
                        "",
                        "# BUILD DATABASE",
                        "read -r -p \"[INSTALL] - BUILD DATABASE? [yes]\" response",
                        "response=${response}",
                        "if [[ ${response} =~ ^(yes|y| ) ]] || [[ -z ${response} ]]; then",
                        "    bin/build-db",
                        "fi",
                        "",
                        "# BUILD ASSETS",
                        "printf \"\\n[INSTALL] - BUILDING ASSETS... \\n\"",
                        "bin/build",
                        "",
                        "# WARM UP CACHE",
                        "printf \"\\n[INSTALL] - WARM UP CACHE... \\n\"",
                        "symfony console cache:warmup",
                        ""
                    ],
                    "executable": true
                },
                "bin/npm": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "binDir=`dirname \"$BASH_SOURCE\"`",
                        "",
                        "WORKDIR=.",
                        "IMAGE=inventis/node:12-alpine",
                        "",
                        "# Set INVENTIS_SSH_FILE_PATH environment variable if you want to change the default ssh key file path",
                        "[[ -z \"${INVENTIS_SSH_FILE_PATH}\" ]] && sshFilePath=~/.ssh/id_rsa || sshFilePath=\"${INVENTIS_SSH_FILE_PATH}\"",
                        "",
                        "docker pull ${IMAGE}",
                        "${binDir}/docker-run -i -t --rm --workdir ${WORKDIR} --volume ${sshFilePath}:/root/.ssh/id_rsa:ro --volume ~/.cache/docker-npm:/root/.npm --volume ~/.npmrc:/root/.npmrc:ro ${IMAGE} npm $@",
                        ""
                    ],
                    "executable": true
                }
            },
            "ref": "238e71fcde89ce7ff6e7287475a7da8b738c5466"
        }
    }
}
