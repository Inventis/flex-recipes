{
    "manifests": {
        "sentry/sentry-symfony": {
            "manifest": {
                "bundles": {
                    "Sentry\\SentryBundle\\SentryBundle": [
                        "all"
                    ]
                },
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/"
                },
                "env": {
                    "SENTRY_DSN": ""
                }
            },
            "files": {
                "config/packages/sentry.yaml": {
                    "contents": [
                        "sentry:",
                        "    dsn: '%env(SENTRY_DSN)%'",
                        "    options:",
                        "        error_types: 'E_ALL & ~E_NOTICE & ~E_USER_NOTICE & ~E_DEPRECATED & ~E_USER_DEPRECATED'",
                        "    messenger:",
                        "        enabled: true",
                        "        capture_soft_fails: false",
                        "",
                        "when@prod: &prod",
                        "    sentry:",
                        "        options:",
                        "            integrations:",
                        "                - 'Sentry\\Integration\\IgnoreErrorsIntegration'",
                        "",
                        "    services:",
                        "        Sentry\\Integration\\IgnoreErrorsIntegration:",
                        "            arguments:",
                        "                $options:",
                        "                    ignore_exceptions:",
                        "                        - Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException",
                        "                        - Symfony\\Component\\Security\\Core\\Exception\\AuthenticationCredentialsNotFoundException",
                        "                        - Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException",
                        "                        - Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException",
                        "                        - Symfony\\Component\\HttpKernel\\Exception\\MethodNotAllowedHttpException",
                        "                        # Failed messages are logged by `MessengerListener` because we have that enabled. The messenger",
                        "                        # integration logs the nested exception directly rather than `HandlerFailedException` (which is what",
                        "                        # we want, because Sentry will then match the nested exception with the ignores listed here).",
                        "                        - Symfony\\Component\\Messenger\\Exception\\HandlerFailedException",
                        "",
                        "when@staging: *prod",
                        "",
                        "## See https://docs.sentry.io/platforms/php/guides/symfony/integrations/monolog/ for more info",
                        "#sentry:",
                        "#    register_error_listener: false # Disables the ErrorListener to avoid duplicated log in sentry",
                        "#    register_error_handler: false # Disables the ErrorListener, ExceptionListener and FatalErrorListener integrations of the base PHP SDK",
                        "#",
                        "#services:",
                        "#    # (Optionally) Configure the breadcrumb handler as a service (needed for the breadcrumb Monolog handler)",
                        "#    Sentry\\Monolog\\BreadcrumbHandler:",
                        "#        arguments:",
                        "#            - '@Sentry\\State\\HubInterface'",
                        "#            - !php/const Monolog\\Logger::INFO # Configures the level of messages to capture as breadcrumbs",
                        "#",
                        "#monolog:",
                        "#    handlers:",
                        "#        # (Optionally) Register the breadcrumb handler as a Monolog handler",
                        "#        sentry_breadcrumbs:",
                        "#            type: service",
                        "#            name: sentry_breadcrumbs",
                        "#            id: Sentry\\Monolog\\BreadcrumbHandler",
                        "#        # Register the handler as a Monolog handler to capture messages as events",
                        "#        sentry:",
                        "#            type: sentry",
                        "#            level: !php/const Monolog\\Logger::ERROR # Configures the level of messages to capture as events",
                        "#            hub_id: Sentry\\State\\HubInterface",
                        "#            fill_extra_context: true # Enables sending monolog context to Sentry",
                        "#            process_psr_3_messages: false # Disables the resolution of PSR-3 placeholders in reported messages",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "4c8342d76b7f1b7e51bd9ab0c98c81d50463a738"
        }
    }
}
